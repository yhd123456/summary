正则：
	专门用来检索（模糊范围）*字符串*的一种规则（工具）
	
	简写：//
	标准写法：
		new RegExp（''||正则，修饰符）  是变量用标准写法 写

	* 可以有数字也可以没有数字

        . 任意字符(除了\n以外)

        ? 可以有（最多一个）也可以没有
	
中文的区间范围：
		[\u4e00-\u9fa5]		

	修饰符：（一般放在正则的后面）
		i 忽略大小写；
		g 找全局；
		\d 一个数字；
		\D 一个非数字
		\w 一个数字|字母|下划线
		\W 一个数字|字母|下划线
		\s 一个空格
		\S 一个非空格
		\b 一个边界符
		\B 一个非边界符


量词：（用来修饰前面的规则的）
		+ 最少有一个，最多不限，			（字符）+量词  如果把字符当作子项后面又有量词，子项为最后一个，

{}一般用来表示匹配的长度，比如 \s{3} 表示匹配三个空格，\s[1,3]表示匹配一到三个空格。
	{}  区间范围（位数）
	
	{n，m}	最小n，最大为m
	{n，}	最小n次，最大不限
	{n}	最大最小都是n次
	
	
正则.test(str);（方法）

	返回值：（boolean布尔值）
		检测字符串是否被正则匹配，如果匹配true，否则false；

string.search(字符串||正则)
	查找正则匹配到的下标，找到返回下标，没找到返回-1；

string.match(正则):

	把正则匹配到的字符push到一个数组

	返回值：
		匹配上就为是数组，
		没匹配上为null，

	如果只匹配到一个，那么数组中有3个属性.

	第一个：匹配到的字符
	
	第二个：下标
	
	第三个：整个字符串

	length还是1，

string.replace（字符串||正则，字符串||cb）
		第一个参数：替换谁；
		第二个参数: 替换成什么；
		
	cb：默认的前三个参数
	
		$0:当前正则匹配到的字符
		$1：当前正则匹配到的字符索引
		$2：当前所有的字符
		$3...:undefined

	子项：（提权）（1+2）*3
		从左往右去数的
		（（））	
	有子项的时候$0后面的就是子项，有几个子项就有几个$x

^ 开头 
$ 结尾


[] 正则中指的是范围，

	0-9  数字的范围
	a-z  小写字母的范围
	A-Z  大写字母的范围
	
	大写到小写字母：
			A-Za-z

如果在[有^]代表排除


重复子项
	\num
	子项为第几个子项怒马就是几
	


	